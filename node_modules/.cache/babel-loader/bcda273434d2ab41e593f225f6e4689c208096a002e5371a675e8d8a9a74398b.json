{"ast":null,"code":"import { removeElement } from 'domutils';\nimport { Document, isDocument as checkIsDocument } from 'domhandler';\n/**\n * Get the parse function with options.\n *\n * @param parser - The parser function.\n * @returns The parse function with options.\n */\nexport function getParse(parser) {\n  /**\n   * Parse a HTML string or a node.\n   *\n   * @param content - The HTML string or node.\n   * @param options - The parser options.\n   * @param isDocument - If `content` is a document.\n   * @param context - The context node in the DOM tree.\n   * @returns The parsed document node.\n   */\n  return function parse(content, options, isDocument, context) {\n    if (typeof Buffer !== 'undefined' && Buffer.isBuffer(content)) {\n      content = content.toString();\n    }\n    if (typeof content === 'string') {\n      return parser(content, options, isDocument, context);\n    }\n    const doc = content;\n    if (!Array.isArray(doc) && checkIsDocument(doc)) {\n      // If `doc` is already a root, just return it\n      return doc;\n    }\n    // Add conent to new root element\n    const root = new Document([]);\n    // Update the DOM using the root\n    update(doc, root);\n    return root;\n  };\n}\n/**\n * Update the dom structure, for one changed layer.\n *\n * @param newChilds - The new children.\n * @param parent - The new parent.\n * @returns The parent node.\n */\nexport function update(newChilds, parent) {\n  // Normalize\n  const arr = Array.isArray(newChilds) ? newChilds : [newChilds];\n  // Update parent\n  if (parent) {\n    parent.children = arr;\n  } else {\n    parent = null;\n  }\n  // Update neighbors\n  for (let i = 0; i < arr.length; i++) {\n    const node = arr[i];\n    // Cleanly remove existing nodes from their previous structures.\n    if (node.parent && node.parent.children !== arr) {\n      removeElement(node);\n    }\n    if (parent) {\n      node.prev = arr[i - 1] || null;\n      node.next = arr[i + 1] || null;\n    } else {\n      node.prev = node.next = null;\n    }\n    node.parent = parent;\n  }\n  return parent;\n}","map":{"version":3,"names":["removeElement","Document","isDocument","checkIsDocument","getParse","parser","parse","content","options","context","Buffer","isBuffer","toString","doc","Array","isArray","root","update","newChilds","parent","arr","children","i","length","node","prev","next"],"sources":["C:/Users/RicardoMelo/Documents/Ricardo Melo/Pagina de juegos/mega-juegos-pc/frontend/node_modules/cheerio/dist/browser/parse.js"],"sourcesContent":["import { removeElement } from 'domutils';\nimport { Document, isDocument as checkIsDocument, } from 'domhandler';\n/**\n * Get the parse function with options.\n *\n * @param parser - The parser function.\n * @returns The parse function with options.\n */\nexport function getParse(parser) {\n    /**\n     * Parse a HTML string or a node.\n     *\n     * @param content - The HTML string or node.\n     * @param options - The parser options.\n     * @param isDocument - If `content` is a document.\n     * @param context - The context node in the DOM tree.\n     * @returns The parsed document node.\n     */\n    return function parse(content, options, isDocument, context) {\n        if (typeof Buffer !== 'undefined' && Buffer.isBuffer(content)) {\n            content = content.toString();\n        }\n        if (typeof content === 'string') {\n            return parser(content, options, isDocument, context);\n        }\n        const doc = content;\n        if (!Array.isArray(doc) && checkIsDocument(doc)) {\n            // If `doc` is already a root, just return it\n            return doc;\n        }\n        // Add conent to new root element\n        const root = new Document([]);\n        // Update the DOM using the root\n        update(doc, root);\n        return root;\n    };\n}\n/**\n * Update the dom structure, for one changed layer.\n *\n * @param newChilds - The new children.\n * @param parent - The new parent.\n * @returns The parent node.\n */\nexport function update(newChilds, parent) {\n    // Normalize\n    const arr = Array.isArray(newChilds) ? newChilds : [newChilds];\n    // Update parent\n    if (parent) {\n        parent.children = arr;\n    }\n    else {\n        parent = null;\n    }\n    // Update neighbors\n    for (let i = 0; i < arr.length; i++) {\n        const node = arr[i];\n        // Cleanly remove existing nodes from their previous structures.\n        if (node.parent && node.parent.children !== arr) {\n            removeElement(node);\n        }\n        if (parent) {\n            node.prev = arr[i - 1] || null;\n            node.next = arr[i + 1] || null;\n        }\n        else {\n            node.prev = node.next = null;\n        }\n        node.parent = parent;\n    }\n    return parent;\n}\n//# sourceMappingURL=parse.js.map"],"mappings":"AAAA,SAASA,aAAa,QAAQ,UAAU;AACxC,SAASC,QAAQ,EAAEC,UAAU,IAAIC,eAAe,QAAS,YAAY;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,QAAQA,CAACC,MAAM,EAAE;EAC7B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAO,SAASC,KAAKA,CAACC,OAAO,EAAEC,OAAO,EAAEN,UAAU,EAAEO,OAAO,EAAE;IACzD,IAAI,OAAOC,MAAM,KAAK,WAAW,IAAIA,MAAM,CAACC,QAAQ,CAACJ,OAAO,CAAC,EAAE;MAC3DA,OAAO,GAAGA,OAAO,CAACK,QAAQ,CAAC,CAAC;IAChC;IACA,IAAI,OAAOL,OAAO,KAAK,QAAQ,EAAE;MAC7B,OAAOF,MAAM,CAACE,OAAO,EAAEC,OAAO,EAAEN,UAAU,EAAEO,OAAO,CAAC;IACxD;IACA,MAAMI,GAAG,GAAGN,OAAO;IACnB,IAAI,CAACO,KAAK,CAACC,OAAO,CAACF,GAAG,CAAC,IAAIV,eAAe,CAACU,GAAG,CAAC,EAAE;MAC7C;MACA,OAAOA,GAAG;IACd;IACA;IACA,MAAMG,IAAI,GAAG,IAAIf,QAAQ,CAAC,EAAE,CAAC;IAC7B;IACAgB,MAAM,CAACJ,GAAG,EAAEG,IAAI,CAAC;IACjB,OAAOA,IAAI;EACf,CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,MAAMA,CAACC,SAAS,EAAEC,MAAM,EAAE;EACtC;EACA,MAAMC,GAAG,GAAGN,KAAK,CAACC,OAAO,CAACG,SAAS,CAAC,GAAGA,SAAS,GAAG,CAACA,SAAS,CAAC;EAC9D;EACA,IAAIC,MAAM,EAAE;IACRA,MAAM,CAACE,QAAQ,GAAGD,GAAG;EACzB,CAAC,MACI;IACDD,MAAM,GAAG,IAAI;EACjB;EACA;EACA,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,GAAG,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;IACjC,MAAME,IAAI,GAAGJ,GAAG,CAACE,CAAC,CAAC;IACnB;IACA,IAAIE,IAAI,CAACL,MAAM,IAAIK,IAAI,CAACL,MAAM,CAACE,QAAQ,KAAKD,GAAG,EAAE;MAC7CpB,aAAa,CAACwB,IAAI,CAAC;IACvB;IACA,IAAIL,MAAM,EAAE;MACRK,IAAI,CAACC,IAAI,GAAGL,GAAG,CAACE,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI;MAC9BE,IAAI,CAACE,IAAI,GAAGN,GAAG,CAACE,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI;IAClC,CAAC,MACI;MACDE,IAAI,CAACC,IAAI,GAAGD,IAAI,CAACE,IAAI,GAAG,IAAI;IAChC;IACAF,IAAI,CAACL,MAAM,GAAGA,MAAM;EACxB;EACA,OAAOA,MAAM;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}