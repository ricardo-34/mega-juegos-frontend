{"ast":null,"code":"import { isDocument } from 'domhandler';\nimport { parse as parseDocument, parseFragment, serializeOuter } from 'parse5';\nimport { adapter as htmlparser2Adapter } from 'parse5-htmlparser2-tree-adapter';\n/**\n * Parse the content with `parse5` in the context of the given `ParentNode`.\n *\n * @param content - The content to parse.\n * @param options - A set of options to use to parse.\n * @param isDocument - Whether to parse the content as a full HTML document.\n * @param context - The context in which to parse the content.\n * @returns The parsed content.\n */\nexport function parseWithParse5(content, options, isDocument, context) {\n  var _a;\n  (_a = options.treeAdapter) !== null && _a !== void 0 ? _a : options.treeAdapter = htmlparser2Adapter;\n  if (options.scriptingEnabled !== false) {\n    options.scriptingEnabled = true;\n  }\n  return isDocument ? parseDocument(content, options) : parseFragment(context, content, options);\n}\nconst renderOpts = {\n  treeAdapter: htmlparser2Adapter\n};\n/**\n * Renders the given DOM tree with `parse5` and returns the result as a string.\n *\n * @param dom - The DOM tree to render.\n * @returns The rendered document.\n */\nexport function renderWithParse5(dom) {\n  /*\n   * `dom-serializer` passes over the special \"root\" node and renders the\n   * node's children in its place. To mimic this behavior with `parse5`, an\n   * equivalent operation must be applied to the input array.\n   */\n  const nodes = 'length' in dom ? dom : [dom];\n  for (let index = 0; index < nodes.length; index += 1) {\n    const node = nodes[index];\n    if (isDocument(node)) {\n      Array.prototype.splice.call(nodes, index, 1, ...node.children);\n    }\n  }\n  let result = '';\n  for (let index = 0; index < nodes.length; index += 1) {\n    const node = nodes[index];\n    result += serializeOuter(node, renderOpts);\n  }\n  return result;\n}","map":{"version":3,"names":["isDocument","parse","parseDocument","parseFragment","serializeOuter","adapter","htmlparser2Adapter","parseWithParse5","content","options","context","_a","treeAdapter","scriptingEnabled","renderOpts","renderWithParse5","dom","nodes","index","length","node","Array","prototype","splice","call","children","result"],"sources":["C:/Users/RicardoMelo/Documents/Ricardo Melo/Pagina de juegos/mega-juegos-pc/frontend/node_modules/cheerio/dist/browser/parsers/parse5-adapter.js"],"sourcesContent":["import { isDocument, } from 'domhandler';\nimport { parse as parseDocument, parseFragment, serializeOuter } from 'parse5';\nimport { adapter as htmlparser2Adapter } from 'parse5-htmlparser2-tree-adapter';\n/**\n * Parse the content with `parse5` in the context of the given `ParentNode`.\n *\n * @param content - The content to parse.\n * @param options - A set of options to use to parse.\n * @param isDocument - Whether to parse the content as a full HTML document.\n * @param context - The context in which to parse the content.\n * @returns The parsed content.\n */\nexport function parseWithParse5(content, options, isDocument, context) {\n    var _a;\n    (_a = options.treeAdapter) !== null && _a !== void 0 ? _a : (options.treeAdapter = htmlparser2Adapter);\n    if (options.scriptingEnabled !== false) {\n        options.scriptingEnabled = true;\n    }\n    return isDocument\n        ? parseDocument(content, options)\n        : parseFragment(context, content, options);\n}\nconst renderOpts = { treeAdapter: htmlparser2Adapter };\n/**\n * Renders the given DOM tree with `parse5` and returns the result as a string.\n *\n * @param dom - The DOM tree to render.\n * @returns The rendered document.\n */\nexport function renderWithParse5(dom) {\n    /*\n     * `dom-serializer` passes over the special \"root\" node and renders the\n     * node's children in its place. To mimic this behavior with `parse5`, an\n     * equivalent operation must be applied to the input array.\n     */\n    const nodes = 'length' in dom ? dom : [dom];\n    for (let index = 0; index < nodes.length; index += 1) {\n        const node = nodes[index];\n        if (isDocument(node)) {\n            Array.prototype.splice.call(nodes, index, 1, ...node.children);\n        }\n    }\n    let result = '';\n    for (let index = 0; index < nodes.length; index += 1) {\n        const node = nodes[index];\n        result += serializeOuter(node, renderOpts);\n    }\n    return result;\n}\n//# sourceMappingURL=parse5-adapter.js.map"],"mappings":"AAAA,SAASA,UAAU,QAAS,YAAY;AACxC,SAASC,KAAK,IAAIC,aAAa,EAAEC,aAAa,EAAEC,cAAc,QAAQ,QAAQ;AAC9E,SAASC,OAAO,IAAIC,kBAAkB,QAAQ,iCAAiC;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAACC,OAAO,EAAEC,OAAO,EAAET,UAAU,EAAEU,OAAO,EAAE;EACnE,IAAIC,EAAE;EACN,CAACA,EAAE,GAAGF,OAAO,CAACG,WAAW,MAAM,IAAI,IAAID,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAIF,OAAO,CAACG,WAAW,GAAGN,kBAAmB;EACtG,IAAIG,OAAO,CAACI,gBAAgB,KAAK,KAAK,EAAE;IACpCJ,OAAO,CAACI,gBAAgB,GAAG,IAAI;EACnC;EACA,OAAOb,UAAU,GACXE,aAAa,CAACM,OAAO,EAAEC,OAAO,CAAC,GAC/BN,aAAa,CAACO,OAAO,EAAEF,OAAO,EAAEC,OAAO,CAAC;AAClD;AACA,MAAMK,UAAU,GAAG;EAAEF,WAAW,EAAEN;AAAmB,CAAC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASS,gBAAgBA,CAACC,GAAG,EAAE;EAClC;AACJ;AACA;AACA;AACA;EACI,MAAMC,KAAK,GAAG,QAAQ,IAAID,GAAG,GAAGA,GAAG,GAAG,CAACA,GAAG,CAAC;EAC3C,KAAK,IAAIE,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGD,KAAK,CAACE,MAAM,EAAED,KAAK,IAAI,CAAC,EAAE;IAClD,MAAME,IAAI,GAAGH,KAAK,CAACC,KAAK,CAAC;IACzB,IAAIlB,UAAU,CAACoB,IAAI,CAAC,EAAE;MAClBC,KAAK,CAACC,SAAS,CAACC,MAAM,CAACC,IAAI,CAACP,KAAK,EAAEC,KAAK,EAAE,CAAC,EAAE,GAAGE,IAAI,CAACK,QAAQ,CAAC;IAClE;EACJ;EACA,IAAIC,MAAM,GAAG,EAAE;EACf,KAAK,IAAIR,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGD,KAAK,CAACE,MAAM,EAAED,KAAK,IAAI,CAAC,EAAE;IAClD,MAAME,IAAI,GAAGH,KAAK,CAACC,KAAK,CAAC;IACzBQ,MAAM,IAAItB,cAAc,CAACgB,IAAI,EAAEN,UAAU,CAAC;EAC9C;EACA,OAAOY,MAAM;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}