{"ast":null,"code":"import { flattenOptions } from './options.js';\nimport * as staticMethods from './static.js';\nimport { Cheerio } from './cheerio.js';\nimport { isHtml, isCheerio } from './utils.js';\nexport function getLoad(parse, render) {\n  /**\n   * Create a querying function, bound to a document created from the provided\n   * markup.\n   *\n   * Note that similar to web browser contexts, this operation may introduce\n   * `<html>`, `<head>`, and `<body>` elements; set `isDocument` to `false` to\n   * switch to fragment mode and disable this.\n   *\n   * @param content - Markup to be loaded.\n   * @param options - Options for the created instance.\n   * @param isDocument - Allows parser to be switched to fragment mode.\n   * @returns The loaded document.\n   * @see {@link https://cheerio.js.org#loading} for additional usage information.\n   */\n  return function load(content, options, isDocument = true) {\n    if (content == null) {\n      throw new Error('cheerio.load() expects a string');\n    }\n    const internalOpts = flattenOptions(options);\n    const initialRoot = parse(content, internalOpts, isDocument, null);\n    /**\n     * Create an extended class here, so that extensions only live on one\n     * instance.\n     */\n    class LoadedCheerio extends Cheerio {\n      _make(selector, context) {\n        const cheerio = initialize(selector, context);\n        cheerio.prevObject = this;\n        return cheerio;\n      }\n      _parse(content, options, isDocument, context) {\n        return parse(content, options, isDocument, context);\n      }\n      _render(dom) {\n        return render(dom, this.options);\n      }\n    }\n    function initialize(selector, context, root = initialRoot, opts) {\n      // $($)\n      if (selector && isCheerio(selector)) return selector;\n      const options = flattenOptions(opts, internalOpts);\n      const r = typeof root === 'string' ? [parse(root, options, false, null)] : 'length' in root ? root : [root];\n      const rootInstance = isCheerio(r) ? r : new LoadedCheerio(r, null, options);\n      // Add a cyclic reference, so that calling methods on `_root` never fails.\n      rootInstance._root = rootInstance;\n      // $(), $(null), $(undefined), $(false)\n      if (!selector) {\n        return new LoadedCheerio(undefined, rootInstance, options);\n      }\n      const elements = typeof selector === 'string' && isHtml(selector) ?\n      // $(<html>)\n      parse(selector, options, false, null).children : isNode(selector) ?\n      // $(dom)\n      [selector] : Array.isArray(selector) ?\n      // $([dom])\n      selector : undefined;\n      const instance = new LoadedCheerio(elements, rootInstance, options);\n      if (elements) {\n        return instance;\n      }\n      if (typeof selector !== 'string') {\n        throw new TypeError('Unexpected type of selector');\n      }\n      // We know that our selector is a string now.\n      let search = selector;\n      const searchContext = context ?\n      // If we don't have a context, maybe we have a root, from loading\n      typeof context === 'string' ? isHtml(context) ?\n      // $('li', '<ul>...</ul>')\n      new LoadedCheerio([parse(context, options, false, null)], rootInstance, options) : (\n      // $('li', 'ul')\n      search = `${context} ${search}`, rootInstance) : isCheerio(context) ?\n      // $('li', $)\n      context :\n      // $('li', node), $('li', [nodes])\n      new LoadedCheerio(Array.isArray(context) ? context : [context], rootInstance, options) : rootInstance;\n      // If we still don't have a context, return\n      if (!searchContext) return instance;\n      /*\n       * #id, .class, tag\n       */\n      return searchContext.find(search);\n    }\n    // Add in static methods & properties\n    Object.assign(initialize, staticMethods, {\n      load,\n      // `_root` and `_options` are used in static methods.\n      _root: initialRoot,\n      _options: internalOpts,\n      // Add `fn` for plugins\n      fn: LoadedCheerio.prototype,\n      // Add the prototype here to maintain `instanceof` behavior.\n      prototype: LoadedCheerio.prototype\n    });\n    return initialize;\n  };\n}\nfunction isNode(obj) {\n  return !!obj.name || obj.type === 'root' || obj.type === 'text' || obj.type === 'comment';\n}","map":{"version":3,"names":["flattenOptions","staticMethods","Cheerio","isHtml","isCheerio","getLoad","parse","render","load","content","options","isDocument","Error","internalOpts","initialRoot","LoadedCheerio","_make","selector","context","cheerio","initialize","prevObject","_parse","_render","dom","root","opts","r","rootInstance","_root","undefined","elements","children","isNode","Array","isArray","instance","TypeError","search","searchContext","find","Object","assign","_options","fn","prototype","obj","name","type"],"sources":["C:/Users/RicardoMelo/Documents/Ricardo Melo/Pagina de juegos/mega-juegos-pc/frontend/node_modules/cheerio/dist/browser/load.js"],"sourcesContent":["import { flattenOptions, } from './options.js';\nimport * as staticMethods from './static.js';\nimport { Cheerio } from './cheerio.js';\nimport { isHtml, isCheerio } from './utils.js';\nexport function getLoad(parse, render) {\n    /**\n     * Create a querying function, bound to a document created from the provided\n     * markup.\n     *\n     * Note that similar to web browser contexts, this operation may introduce\n     * `<html>`, `<head>`, and `<body>` elements; set `isDocument` to `false` to\n     * switch to fragment mode and disable this.\n     *\n     * @param content - Markup to be loaded.\n     * @param options - Options for the created instance.\n     * @param isDocument - Allows parser to be switched to fragment mode.\n     * @returns The loaded document.\n     * @see {@link https://cheerio.js.org#loading} for additional usage information.\n     */\n    return function load(content, options, isDocument = true) {\n        if (content == null) {\n            throw new Error('cheerio.load() expects a string');\n        }\n        const internalOpts = flattenOptions(options);\n        const initialRoot = parse(content, internalOpts, isDocument, null);\n        /**\n         * Create an extended class here, so that extensions only live on one\n         * instance.\n         */\n        class LoadedCheerio extends Cheerio {\n            _make(selector, context) {\n                const cheerio = initialize(selector, context);\n                cheerio.prevObject = this;\n                return cheerio;\n            }\n            _parse(content, options, isDocument, context) {\n                return parse(content, options, isDocument, context);\n            }\n            _render(dom) {\n                return render(dom, this.options);\n            }\n        }\n        function initialize(selector, context, root = initialRoot, opts) {\n            // $($)\n            if (selector && isCheerio(selector))\n                return selector;\n            const options = flattenOptions(opts, internalOpts);\n            const r = typeof root === 'string'\n                ? [parse(root, options, false, null)]\n                : 'length' in root\n                    ? root\n                    : [root];\n            const rootInstance = isCheerio(r)\n                ? r\n                : new LoadedCheerio(r, null, options);\n            // Add a cyclic reference, so that calling methods on `_root` never fails.\n            rootInstance._root = rootInstance;\n            // $(), $(null), $(undefined), $(false)\n            if (!selector) {\n                return new LoadedCheerio(undefined, rootInstance, options);\n            }\n            const elements = typeof selector === 'string' && isHtml(selector)\n                ? // $(<html>)\n                    parse(selector, options, false, null).children\n                : isNode(selector)\n                    ? // $(dom)\n                        [selector]\n                    : Array.isArray(selector)\n                        ? // $([dom])\n                            selector\n                        : undefined;\n            const instance = new LoadedCheerio(elements, rootInstance, options);\n            if (elements) {\n                return instance;\n            }\n            if (typeof selector !== 'string') {\n                throw new TypeError('Unexpected type of selector');\n            }\n            // We know that our selector is a string now.\n            let search = selector;\n            const searchContext = context\n                ? // If we don't have a context, maybe we have a root, from loading\n                    typeof context === 'string'\n                        ? isHtml(context)\n                            ? // $('li', '<ul>...</ul>')\n                                new LoadedCheerio([parse(context, options, false, null)], rootInstance, options)\n                            : // $('li', 'ul')\n                                ((search = `${context} ${search}`), rootInstance)\n                        : isCheerio(context)\n                            ? // $('li', $)\n                                context\n                            : // $('li', node), $('li', [nodes])\n                                new LoadedCheerio(Array.isArray(context) ? context : [context], rootInstance, options)\n                : rootInstance;\n            // If we still don't have a context, return\n            if (!searchContext)\n                return instance;\n            /*\n             * #id, .class, tag\n             */\n            return searchContext.find(search);\n        }\n        // Add in static methods & properties\n        Object.assign(initialize, staticMethods, {\n            load,\n            // `_root` and `_options` are used in static methods.\n            _root: initialRoot,\n            _options: internalOpts,\n            // Add `fn` for plugins\n            fn: LoadedCheerio.prototype,\n            // Add the prototype here to maintain `instanceof` behavior.\n            prototype: LoadedCheerio.prototype,\n        });\n        return initialize;\n    };\n}\nfunction isNode(obj) {\n    return (!!obj.name ||\n        obj.type === 'root' ||\n        obj.type === 'text' ||\n        obj.type === 'comment');\n}\n//# sourceMappingURL=load.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}